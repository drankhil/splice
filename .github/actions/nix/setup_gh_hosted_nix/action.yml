
name: 'Setup self-hosted Nix'
description: 'Setup self-hosted Nix'

runs:
  using: 'composite'
  steps:
    - name: Restore Nix
      shell: bash
      run: |
        set -euxo pipefail
        cache_key="69c04df5151a8da969d5b501a60d4cd2"
        wget -q "https://storage.googleapis.com/splice-nix-cache-public/${cache_key}.tar.gz"
        # unzip it to /cache/nix
        sudo mkdir -p /cache/nix
        sudo tar -xzf 69c04df5151a8da969d5b501a60d4cd2.tar.gz -C /cache/nix
        ls -al "/cache/nix/$cache_key"
        # we use rsync here because it's simply faster to install
        rsync -avi /cache/nix/$cache_key/.nix-* $HOME/
        rsync -avi "/cache/nix/$cache_key/nix" $HOME/.config/
        rsync -avi "/cache/nix/$cache_key/nix_store/var/" /nix/var
        sudo mount --bind /cache/nix/$cache_key/nix_store/store /nix/store

    # FIXME: reuse with self_hosted
    - name: Setup Nix
      shell: bash
      run: |
          set -exuo pipefail
          echo 'source ~/.nix-profile/etc/profile.d/nix.sh' > nix.rc
          if [ -f ~/.config/nix/nix.conf ]; then
            echo "nix.conf already exists, skipping Nix setup"
            exit 0
          else
            # Disabling sandbox because:
            # 1. It doesn't work on CircleCI (sethostname is not allowed)
            # 2. We don't plan to build anything, so the risk is fairly low
            mkdir -p ~/.config/nix
            if [ true ]; then
              cat <<EOF > ~/.config/nix/nix.conf
              sandbox = false
              netrc-file = /etc/nix/netrc
              extra-experimental-features = nix-command flakes
              substituters = file:///cache/nix/binary_cache?trusted=1 https://cache.nixos.org/
              trusted-substituters = file:///cache/nix/binary_cache?trusted=1
              trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
              cores = 4
              max-jobs = 16
          EOF
            else
              cat <<EOF > ~/.config/nix/nix.conf
              sandbox = false
              netrc-file = /etc/nix/netrc
              extra-experimental-features = nix-command flakes
              cores = 4
              max-jobs = 16
          EOF
            fi
            sh <(curl -fsSL --retry 8 https://releases.nixos.org/nix/nix-2.13.3/install) --no-daemon
            sudo mkdir -p /etc/nix
            sudo chmod a+rw /etc/nix
            if [[ "${{ inputs.oss_only }}" == true ]]; then
              echo "Using OSS only dependencies, not setting up Artifactory credentials"
            else
              cat <<EOF > /etc/nix/netrc
              machine digitalasset.jfrog.io
              login ${{ inputs.artifactory_user }}
              password ${{ inputs.artifactory_password }}
          EOF
            fi
            export USER=$(whoami)
            echo "Running nix.sh"
            . ~/.nix-profile/etc/profile.d/nix.sh
            if [[ "${{ inputs.oss_only }}" == true ]]; then
              target="oss"
            else
              target="default"
            fi
            nix develop path:nix#${target} -v --profile "$HOME/.nix-shell" --command echo "Done loading packages"
            echo "Garbage collecting to reduce cache size"
            nix-store --gc
          fi

    # FIXME: probably not useful if we don't save the cache
    - name: Invoke nix for testing
      uses: ./.github/actions/nix/run_bash_command_in_nix
      with:
        cmd: |
          echo "Validated nix"
          ls -al
